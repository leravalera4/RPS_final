/**
 * Wallet Monitoring Service
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º service wallet –∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç –µ–≥–æ
 * –∫–æ–≥–¥–∞ –±–∞–ª–∞–Ω—Å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–º
 */

require('dotenv').config();

const { Connection, PublicKey, SystemProgram, Transaction, LAMPORTS_PER_SOL } = require('@solana/web3.js');
const { getServiceWallet } = require('../config/serviceWallet');
const { PLATFORM_WALLET } = require('../config/platformWallet');

class WalletMonitoringService {
  constructor() {
    this.connection = new Connection('https://api.devnet.solana.com', 'confirmed');
    this.serviceWallet = null;
    this.isMonitoring = false;
    this.checkInterval = null;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    this.config = {
      minBalance: 5.0,        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ SOL
      refillAmount: 20.0,     // –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ SOL
      checkIntervalMs: 60000, // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
      enabled: true           // –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async initialize() {
    try {
      this.serviceWallet = await getServiceWallet();
      console.log('üí∞ Wallet Monitoring Service initialized');
      console.log('Service wallet:', this.serviceWallet.publicKey.toString());
      console.log('Platform wallet:', PLATFORM_WALLET.toString());
      console.log('Config:', this.config);
      return true;
    } catch (error) {
      console.error('‚ùå Failed to initialize wallet monitoring:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å service wallet
   */
  async checkServiceWalletBalance() {
    try {
      const balance = await this.connection.getBalance(this.serviceWallet.publicKey);
      const balanceSOL = balance / LAMPORTS_PER_SOL;
      
      console.log(`üí∞ Service wallet balance: ${balanceSOL.toFixed(6)} SOL`);
      
      return {
        balance: balanceSOL,
        needsRefill: balanceSOL < this.config.minBalance
      };
    } catch (error) {
      console.error('‚ùå Error checking service wallet balance:', error);
      return { balance: 0, needsRefill: false };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å platform wallet
   */
  async checkPlatformWalletBalance() {
    try {
      const balance = await this.connection.getBalance(PLATFORM_WALLET);
      const balanceSOL = balance / LAMPORTS_PER_SOL;
      
      console.log(`üè¶ Platform wallet balance: ${balanceSOL.toFixed(6)} SOL`);
      
      return {
        balance: balanceSOL,
        canRefill: balanceSOL >= this.config.refillAmount
      };
    } catch (error) {
      console.error('‚ùå Error checking platform wallet balance:', error);
      return { balance: 0, canRefill: false };
    }
  }

  /**
   * –ü–æ–ø–æ–ª–Ω–∏—Ç—å service wallet —Å platform wallet
   */
  async refillServiceWallet() {
    try {
      console.log('üîÑ Attempting to refill service wallet...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã
      const serviceStatus = await this.checkServiceWalletBalance();
      const platformStatus = await this.checkPlatformWalletBalance();
      
      if (!serviceStatus.needsRefill) {
        console.log('‚úÖ Service wallet balance is sufficient');
        return { success: true, reason: 'sufficient_balance' };
      }
      
      if (!platformStatus.canRefill) {
        console.log('‚ùå Platform wallet has insufficient funds for refill');
        console.log(`Need ${this.config.refillAmount} SOL, have ${platformStatus.balance.toFixed(6)} SOL`);
        return { success: false, reason: 'insufficient_platform_funds' };
      }
      
      // –í–ê–ñ–ù–û: –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω—É–∂–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á platform wallet
      // –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ platform wallet —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞
      // –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –ª–∏–±–æ:
      // 1. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á platform wallet (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)
      // 2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å multisig
      // 3. –î–µ–ª–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
      
      console.log('‚ö†Ô∏è Automatic refill requires platform wallet private key');
      console.log('üí° For now, please refill manually:');
      console.log(`   Send ${this.config.refillAmount} SOL from platform wallet to service wallet`);
      console.log(`   Platform: ${PLATFORM_WALLET.toString()}`);
      console.log(`   Service: ${this.serviceWallet.publicKey.toString()}`);
      
      return { success: false, reason: 'manual_refill_required' };
      
    } catch (error) {
      console.error('‚ùå Error refilling service wallet:', error);
      return { success: false, reason: 'error', error: error.message };
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  startMonitoring() {
    if (this.isMonitoring) {
      console.log('‚ö†Ô∏è Monitoring already started');
      return;
    }
    
    if (!this.config.enabled) {
      console.log('‚ö†Ô∏è Wallet monitoring is disabled');
      return;
    }
    
    console.log('üöÄ Starting wallet monitoring...');
    this.isMonitoring = true;
    
    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
    this.performCheck();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.checkInterval = setInterval(() => {
      this.performCheck();
    }, this.config.checkIntervalMs);
    
    console.log(`‚úÖ Wallet monitoring started (check every ${this.config.checkIntervalMs / 1000}s)`);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  stopMonitoring() {
    if (!this.isMonitoring) {
      console.log('‚ö†Ô∏è Monitoring not running');
      return;
    }
    
    console.log('üõë Stopping wallet monitoring...');
    this.isMonitoring = false;
    
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
    }
    
    console.log('‚úÖ Wallet monitoring stopped');
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  async performCheck() {
    try {
      console.log('üîç Performing wallet balance check...');
      
      const serviceStatus = await this.checkServiceWalletBalance();
      
      if (serviceStatus.needsRefill) {
        console.log('‚ö†Ô∏è Service wallet needs refill!');
        const refillResult = await this.refillServiceWallet();
        
        if (refillResult.success) {
          console.log('‚úÖ Service wallet refilled successfully');
        } else {
          console.log('‚ùå Failed to refill service wallet:', refillResult.reason);
          
          // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å webhook, email, etc.)
          this.sendLowBalanceAlert(serviceStatus.balance);
        }
      } else {
        console.log('‚úÖ Service wallet balance is healthy');
      }
      
    } catch (error) {
      console.error('‚ùå Error during wallet check:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ
   */
  sendLowBalanceAlert(balance) {
    console.log('üö® LOW BALANCE ALERT üö®');
    console.log(`Service wallet balance: ${balance.toFixed(6)} SOL`);
    console.log(`Minimum required: ${this.config.minBalance} SOL`);
    console.log('Action required: Manual refill needed');
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
    // - –û—Ç–ø—Ä–∞–≤–∫—É –≤ Discord/Slack
    // - Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    // - Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    // - Webhook –≤—ã–∑–æ–≤—ã
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  getStatus() {
    return {
      isMonitoring: this.isMonitoring,
      config: this.config,
      serviceWallet: this.serviceWallet?.publicKey.toString(),
      platformWallet: PLATFORM_WALLET.toString()
    };
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  updateConfig(newConfig) {
    this.config = { ...this.config, ...newConfig };
    console.log('‚úÖ Wallet monitoring config updated:', this.config);
  }
}

// –°–æ–∑–¥–∞—Ç—å singleton instance
const walletMonitoringService = new WalletMonitoringService();

module.exports = walletMonitoringService;
